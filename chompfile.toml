version = 0.1

extensions = ['chomp@0.1:npm', 'chomp@0.1:footprint', 'chomp@0.1:terser']

[env-default]
WASM_TOOLS = 'wasm-tools'
WASI_PATH = '/opt/wasi-sdk'
JSCT = 'jsct'
WIT_BINDGEN = 'wit-bindgen'

[[task]]
name = 'build'
deps = ['dist/lexer.js', 'dist/lexer.cjs', 'dist/lexer.asm.js', 'dist/lexer.d.ts']

[[task]]
target = 'dist/lexer.cjs'
deps = ['dist/lexer.js']
run = 'babel dist/lexer.js | terser -c -m -o dist/lexer.cjs'

[[task]]
targets = ['dist/lexer.js', 'dist/lexer.d.ts']
deps = ['obj/lexer-component.wasm', 'package.json', 'npm:install']
engine = 'node'
run = '''
	import { transpile } from 'js-component-tools';
	import { readFile, writeFile } from 'node:fs/promises';

	const { files } = await transpile(await readFile('obj/lexer-component.wasm'), {
		outDir: 'dist',
		name: 'lexer',
		validLiftingOptimization: true,
		base64Cutoff: 9000,
		optimize: true,
		minify: true
	});

	const { version } = JSON.parse(await readFile('package.json'));

	await writeFile('dist/lexer.js', `/* es-module-lexer ${version} */\n${
		files['dist/lexer.js']
			.replace(/parse\((\w),(\w)\)\{/, `parse($1,$2){$1+='\\0';`)
			.replace(/n:(\w+)/, 'n:$1?eval($1):$1')
			.replace(/n:([^e])/g, `n:$1&&($1[0]==='"'||$1[0]==="'")?eval($1):$1`)
	}`);
	await writeFile('dist/lexer.d.ts', files['dist/lexer.d.ts']);
'''

[[task]]
target = 'dist/lexer.asm.js'
deps = ['obj/lexer-component.wasm', 'package.json', 'npm:install', 'obj/readstring.min.js']
engine = 'node'
run = '''
	import { transpile } from 'js-component-tools';
	import { readFile, writeFile } from 'node:fs/promises';

	const { files } = await transpile(await readFile('obj/lexer-component.wasm'), {
		outDir: 'dist',
		name: 'lexer.asm',
		validLiftingOptimization: true,
		optimize: true,
		minify: true,
		asm: true
	});

	const { version } = JSON.parse(await readFile('package.json'));
	const readstring = await readFile('obj/readstring.min.js', 'utf8');

	await writeFile('dist/lexer.asm.js', `/* es-module-lexer asm.js ${version} */\n${readstring}${
		files['dist/lexer.asm.js']
			.replace(/parse\((\w),(\w)\)\{/, `parse($1,$2){$1+='\\0';`)
			.replace(/n:(\w)/, 'n:$1?readString($1):$1')
			.replace(/n:([a-qs-zA-Z])/g, `n:$1&&($1[0]==='"'||$1[0]==="'")?readString($1):$1`)
	}`);
'''

[[task]]
target = 'obj/readstring.min.js'
dep = 'src/readstring.js'
template = 'terser'

[[task]]
target = 'obj/lexer-component.wasm'
stdio = 'stderr-only'
deps = ['obj/lexer.wasm', 'src/lexer-world.wit']
# Switch back to jsct after next release with encoding fix
run = '''
  ${{ WASM_TOOLS }} component new $DEP --encoding utf16 --wit src/lexer-world.wit -o $TARGET
'''

[[task]]
target = 'obj/lexer.wasm'
deps = ['obj/lexer_world.c', 'obj/lexer_world.h', 'src/lexer.c', 'src/lexer.h']
stdio = 'stderr-only'
run = """
	${{ WASI_PATH }}/bin/clang src/lexer.c obj/lexer_world.c --sysroot=${{ WASI_PATH }}/share/wasi-sysroot -o obj/lexer.wasm -nostartfiles \
		"-Wl,-z,stack-size=1331200,--no-entry,--compress-relocations,--strip-all" \
		-Wno-logical-op-parentheses -Wno-parentheses \
		-Oz
"""

[[task]]
targets = ['obj/lexer.c', 'obj/lexer_world.h']
dep = 'src/lexer-world.wit'
# stdio = 'stderr-only'
run = '''
	${{ WIT_BINDGEN }} guest c --string-encoding utf16 src/lexer-world.wit --no-helpers --out-dir obj
	mv obj/lexer.h obj/lexer_world.h
'''

[[task]]
target = 'obj/lexer_world.c'
dep = 'obj/lexer.c'
engine = 'node'
run = '''
	import { readFile, writeFile } from 'fs/promises';
	await writeFile(process.env.TARGET, (await readFile(process.env.DEP, 'utf8')).replace('lexer.h', 'lexer_world.h'));
'''

[[task]]
name = 'bench'
serial = true
deps = ['bench:js', 'bench:wasm']

[[task]]
name = 'bench:js'
deps = ['dist/lexer.asm.js']
env = { BENCH = 'js' }
run = 'node --expose-gc bench/index.js'

[[task]]
name = 'bench:wasm'
deps = ['dist/lexer.js']
env = { BENCH = 'wasm' }
run = 'node --expose-gc bench/index.js'

[[task]]
name = 'test'
deps = ['test:wasm', 'test:asm']

[[task]]
name = 'test:js'
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
name = 'test:asm'
deps = ['dist/lexer.asm.js']
env = { ASM = '1' }
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
name = 'test:wasm'
deps = ['dist/lexer.js']
env = { WASM = '1' }
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
target = 'obj/lexer.wat'
dep = 'obj/lexer.wasm'
run = '${{ jsct }} parse -t $DEP -o $TARGET'

[[task]]
target = 'obj/lexer-component.core.wat'
dep = 'obj/lexer-component.core.wasm'
run = '${{ jsct }} parse -t $DEP -o $TARGET'

[[task]]
name = 'footprint'
deps = ['dist/lexer.js', 'dist/lexer.asm.js']
template = 'footprint'
