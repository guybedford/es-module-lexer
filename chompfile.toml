version = 0.1

default-task = "test"

extensions = ['chomp@0.1:npm', 'chomp@0.1:footprint']

[env-default]
WASI_PATH = '../wasi-sdk-12.0'
EMSDK_PATH = '../emsdk'
EMSCRIPTEN_BIN = '../emsdk/fastcomp/emscripten/emcc'

[[task]]
name = 'build'
deps = ['dist/lexer.js', 'dist/lexer.cjs', 'dist/lexer.asm.js']

[[task]]
name = 'bench'
serial = true
deps = ['bench:js', 'bench:wasm']

[[task]]
name = 'bench:js'
deps = ['dist/lexer.asm.js']
env = { BENCH = 'js' }
run = 'node --expose-gc bench/index.js'

[[task]]
name = 'bench:wasm'
deps = ['dist/lexer.js']
env = { BENCH = 'wasm' }
run = 'node --expose-gc bench/index.js'

[[task]]
target = 'dist/lexer.asm.js'
deps = ['lib/lexer.asm.js']
run = 'terser lib/lexer.asm.js -c -m -o dist/lexer.asm.js'

[[task]]
target = 'dist/lexer.cjs'
deps = ['dist/lexer.js']
run = 'babel dist/lexer.js | terser -c -m -o dist/lexer.cjs'

[[task]]
target = 'dist/lexer.js'
deps = ['lib/lexer.wasm', 'src/lexer.js', 'package.json']
engine = 'node'
env = { MINIFY = '1' }
run = '''
	import { readFileSync, writeFileSync } from 'fs';
	import terser from 'terser';

	const wasmBuffer = readFileSync('lib/lexer.wasm');
	const jsSource = readFileSync('src/lexer.js').toString();
	const pjson = JSON.parse(readFileSync('package.json').toString());

	const jsSourceProcessed = jsSource.replace('WASM_BINARY', wasmBuffer.toString('base64'));

	const minified = process.env.MINIFY && terser.minify(jsSourceProcessed, {
		module: true,
		output: {
			preamble: `/* es-module-lexer ${pjson.version} */`
		}
	});

	writeFileSync('dist/lexer.js', minified ? minified.code : jsSourceProcessed);
'''

[[task]]
target = 'lib/lexer.wasm'
deps = ['src/lexer.h', 'src/lexer.c']
run = """
	${{ WASI_PATH }}/bin/clang src/lexer.c --sysroot=${{ WASI_PATH }}/share/wasi-sysroot -o lib/lexer.wasm -nostartfiles \
	"-Wl,-z,stack-size=13312,--no-entry,--compress-relocations,--strip-all,\
	--export=parse,--export=sa,--export=e,--export=ri,--export=re,--export=is,--export=ie,--export=ss,--export=ip,--export=se,--export=ai,--export=id,--export=es,--export=ee,--export=f,--export=__heap_base" \
	-Wno-logical-op-parentheses -Wno-parentheses \
	-Oz
"""

[[task]]
name = 'echo'
run = """
echo \\0331b[1mhi\\0331b[0m
"""

[[task]]
target = 'lib/lexer.emcc.asm.js'
deps = ['src/lexer.h', 'src/lexer.c']
env = { PYTHONHOME = '${{ EMSDK_PYTHON }}/..' }
run = """
	${{ EMSDK_PATH }}/emsdk install 1.40.1-fastcomp
	${{ EMSDK_PATH }}/emsdk activate 1.40.1-fastcomp

	${{ EMSCRIPTEN_BIN }} ./src/lexer.c -o lib/lexer.emcc.js -s WASM=0 -Oz --closure 1 \
	-s EXPORTED_FUNCTIONS="['_parse','_sa','_e','_ri','_re','_is','_ie','_ss','_ip','_se','_ai','_id','_es','_ee','_f','_setSource']" \
	-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s SINGLE_FILE=1 -s TOTAL_STACK=15312 -s --separate-asm

	rm lib/lexer.emcc.js
"""

[[task]]
target = 'lib/lexer.asm.js'
deps = ['lib/lexer.emcc.asm.js', 'src/lexer.asm.js']
engine = 'node'
run = '''
	import { readFileSync, writeFileSync } from 'fs';

	const wrapper_start = readFileSync('src/lexer.asm.js', 'utf8');
	let source = readFileSync('lib/lexer.emcc.asm.js', 'utf8').trim();

	// wrapper
	const header = 'Module["asm"]=(/** @suppress {uselessCode} */ function(';
	if (!source.startsWith(header))
		throw new Error('Unexpected source header');
	
	source = 'function asmInit(' + source.slice(header.length);
	if (!source.endsWith(')'))
		throw new Error('Unexpected source end');
	source = source.slice(0, -1);

	// function renaming
	const fnStart = source.indexOf('EMSCRIPTEN_END_FUNCS');
	if (fnStart === -1)
		throw new Error('Expected EMSCRIPTEN_END_FUNCS');

  // "Manual" tree-shaking
	const replacements = [
		[/,_/g, ','],
		['stackAlloc', 'sta'],
		['setSource', 'ses'],
		['parse', 'p'],
		['__errno_location:Ia,', ''],
		[/function Ia\(.+?}function/, 'function'],
		['__apply_relocations:Da,', ''],
		[/function Da\(.+?}function/, 'function'],
		[',free:A', ''],
		[/function A\(.+?}function/, 'function'],
		['malloc:y,memcpy:F,memset:G,', ''],
		[/function G\(.+?}function/, 'function'],
		['emscripten_get_sbrk_ptr:Ga,', ''],
		[/function Ga\(.+?}function/, 'function'],
		[',stackRestore:Ea,stackSave:Ha', ''],
		[/function Ea\(.+?}function/, 'function'],
		[/function Ha\(.+?}function/, 'function'],
		[/\s*\/\/ EMSCRIPTEN_END_FUNCS\s*/, ''],
		[/\s*\/\/ EMSCRIPTEN_START_FUNCS\s*/, ''],
		[/function y\(.+?}function/, 'function'],
		[/function F\(.+?}function/, 'function'],
		[/function S\(.+?}function/, 'function'],
		[',f=env.g|0,g=env.h|0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=env.a,q=env.b,r=env.c,s=env.d,t=env.e,u=env.f', ''],
		[',w=16128,x=0.0', ''],
		[/global/g, 'g'],
		[/buffer/g, 'f'],
		[',env,', ',n,'],
	];

	for (const [from, to] of replacements) {		
		const replaced = source.replace(from, to);
		if (source === replaced)
			throw new Error(`Error on replacement ${from}`);
		source = replaced;
	}

	writeFileSync(process.env.TARGET, wrapper_start + source);
'''

[[task]]
name = 'test'
deps = ['test:js', 'test:wasm']

[[task]]
name = 'test:js'
deps = ['dist/lexer.asm.js']
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
name = 'test:wasm'
deps = ['dist/lexer.js']
env = { WASM = '1' }
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
target = 'lib/lexer.wat'
dep = 'lib/lexer.wasm'
run = '../wabt/bin/wasm2wat lib/lexer.wasm -o lib/lexer.wat'

[[task]]
name = 'footprint'
deps = ['dist/lexer.js', 'dist/lexer.asm.js']
template = 'footprint'
