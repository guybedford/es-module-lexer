world lexer {
  default export lexer
}

interface lexer {
  /// 
  /// Outputs the list of exports and locations of import specifiers,
  /// including dynamic import and import meta handling.
  ///
  /// @param source Source code to parser
  /// @param name Optional sourcename
  /// @returns Tuple contaning imports list and exports list.
  /// Test
  parse: func(source: string, name: option<string>) -> parse-result

  ///
  /// Module name
  ///
  /// To handle escape sequences in specifier strings, the .n field of imported specifiers will be provided where possible.
  ///
  /// For dynamic import expressions, this field will be empty if not a valid JS string.
  ///
  /// @example
  /// const [imports1, exports1] = parse(String.raw`import './\u0061\u0062.js'`);
  /// imports1[0].n;
  /// // Returns "./ab.js"
  ///
  /// const [imports2, exports2] = parse(`import("./ab.js")`);
  /// imports2[0].n;
  /// // Returns "./ab.js"
  ///
  /// const [imports3, exports3] = parse(`import("./" + "ab.js")`);
  /// imports3[0].n;
  /// // Returns undefined
  ///
  record %import {
    ///
    /// Module name
    ///
    /// To handle escape sequences in specifier strings, the .n field of imported specifiers will be provided where possible.
    ///
    /// For dynamic import expressions, this field will be empty if not a valid JS string.
    ///
    /// @example
    /// const [imports1, exports1] = parse(String.raw`import './\u0061\u0062.js'`);
    /// imports1[0].n;
    /// // Returns "./ab.js"
    ///
    /// const [imports2, exports2] = parse(`import("./ab.js")`);
    /// imports2[0].n;
    /// // Returns "./ab.js"
    ///
    /// const [imports3, exports3] = parse(`import("./" + "ab.js")`);
    /// imports3[0].n;
    /// // Returns undefined
    ///
    n: option<string>,

    ///
    /// Start of module specifier
    ///
    /// @example
    /// const source = `import { a } from 'asdf'`;
    /// const [imports, exports] = parse(source);
    /// source.substring(imports[0].s, imports[0].e);
    /// // Returns "asdf"
    ///
    s: s32,

    ///
    /// End of module specifier
    ///
    e: s32,

    ///
    /// Start of import statement
    ///
    /// @example
    /// const source = `import { a } from 'asdf'`;
    /// const [imports, exports] = parse(source);
    /// source.substring(imports[0].ss, imports[0].se);
    /// // Returns "import { a } from 'asdf';"
    ///
    ss: s32,

    ///
    /// End of import statement
    ///
    se: s32,

    ///
    /// If this import statement is a dynamic import, this is the start value.
    /// Otherwise this is `-1`.
    ///
    d: s32,

    ///
    /// If this import has an import assertion, this is the start value.
    /// Otherwise this is `-1`.
    ///
    a: s32,
  }

  record %export {
    ///
    /// Exported name
    ///
    /// @example
    /// const source = `export default []`;
    /// const [imports, exports] = parse(source);
    /// exports[0].n;
    /// // Returns "default"
    ///
    /// @example
    /// const source = `export const asdf = 42`;
    /// const [imports, exports] = parse(source);
    /// exports[0].n;
    /// // Returns "asdf"
    ///
    n: string,

    ///
    /// Local name, or undefined.
    ///
    /// @example
    /// const source = `export default []`;
    /// const [imports, exports] = parse(source);
    /// exports[0].ln;
    /// // Returns undefined
    ///
    /// @example
    /// const asdf = 42;
    /// const source = `export { asdf as a }`;
    /// const [imports, exports] = parse(source);
    /// exports[0].ln;
    /// // Returns "asdf"
    ///
    ln: option<string>,

    ///
    /// Start of exported name
    ///
    /// @example
    /// const source = `export default []`;
    /// const [imports, exports] = parse(source);
    /// source.substring(exports[0].s, exports[0].e);
    /// // Returns "default"
    ///
    /// @example
    /// const source = `export { 42 as asdf }`;
    /// const [imports, exports] = parse(source);
    /// source.substring(exports[0].s, exports[0].e);
    /// // Returns "asdf"
    ///
    s: s32,

    ///
    /// End of exported name
    ///
    e: s32,

    ///
    /// Start of local name, or -1.
    ///
    /// @example
    /// const asdf = 42;
    /// const source = `export { asdf as a }`;
    /// const [imports, exports] = parse(source);
    /// source.substring(exports[0].ls, exports[0].le);
    /// // Returns "asdf"
    ///
    ls: s32,

    ///
    /// End of local name, or -1.
    ///
    le: s32,
  }

  type parse-result = result<tuple<list<%import>, list<%export>, bool>, string>
}
